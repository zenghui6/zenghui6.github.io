<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>map的分类和常见情况</title>
    <url>/2020/02/09/map%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E5%B8%B8%E8%A7%81%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<p>java 数据结构中映射定义了一个接口java.util.Map</p>
<p>它有四个实现类:</p>
<ol>
<li>HashMap</li>
<li>Hashtable</li>
<li>LinkedHashMap</li>
<li>TreeMap</li>
</ol>
<a id="more"></a>

<p>Map主要用于存储键值对,根据键得到值,因此不允许键重复,但允许值重复</p>
<h3 id="Hashmap"><a href="#Hashmap" class="headerlink" title="Hashmap"></a>Hashmap</h3><p>Hashmap是一个最常用的Map,它根据键的HashCode值存储数据,根据键可以直接获取它的值,具有很快的访问速度.</p>
<p>遍历时,<strong><em>取得数据的顺序是完全随机</em></strong>的.</p>
<p>HashMap最多只允许一条记录的键为Null;</p>
<p>HashMap<strong><em>不支持线程的同步</em></strong>,即任一时刻可以有多个线程同时写HashMap,可能导致数据不一致.</p>
<p>如果需要同步,可以用Collections的synchronizedMap方法使HashMap具有同步能力,或者使用ConcurrentHashMap.</p>
<h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>Hashtable与HashMap类似,它继承自Dictionary类,</p>
<p>不同的是: 它不允许记录的键或者值为空,它<strong><em>支持线程的同步</em></strong>,即任一时刻只有一个线程能写Hashtable,因此也导致了Hashtable在写入时会比较慢.</p>
<h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>LinkedHashMap是HashMap的一个子类,保存了记录的插入顺序,在用Iterator遍历LinkedHashMap时,先得到的记录肯定是先插入的,也可以在构造时用带参数,按照应用次数排序.</p>
<p>在遍历时会比HashMap慢,不过有种情况例外,当HashMap容量很大,实际数据较少时,遍历起来可能会比LinkedHashMap慢,因为LinkedHashMap的遍历速度只与实际数据有关,和容量无关,而HashMap的遍历速度和它的容量有关.</p>
<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>*<em>线程不安全 *</em></p>
<p>TreeMap实现SortMap接口,能够把它保存的记录根据键排序,默认是按键值的升序排序,也可以指定排序的比较器,当用Iterator遍历TreeMap时,得到的记录是排过序的.</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般情况下，我们用的最多的是HashMap,在Map 中插入、删除和定位元素，HashMap 是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。如果需要输出的顺序和输入的相同,那么用LinkedHashMap 可以实现,它还可以按读取顺序来排列.</p>
<p>HashMap是一个最常用的Map，它根据键的hashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。HashMap最多只允许一条记录的键为NULL，允许多条记录的值为NULL。</p>
<p>HashMap不支持线程同步，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致性。如果需要同步，可以用Collections的synchronizedMap方法使HashMap具有同步的能力。</p>
<p>Hashtable与HashMap类似，不同的是：它不允许记录的键或者值为空；它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtable在写入时会比较慢。</p>
<p>LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的。</p>
<p>在遍历的时候会比HashMap慢TreeMap能够把它保存的记录根据键排序，默认是按升序排序，也可以指定排序的比较器。当用Iterator遍历TreeMap时，得到的记录是排过序的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql锁</title>
    <url>/2020/02/08/Mysql%E9%94%81/</url>
    <content><![CDATA[<h2 id="宏观"><a href="#宏观" class="headerlink" title="宏观"></a>宏观</h2><h3 id="数据库锁"><a href="#数据库锁" class="headerlink" title="数据库锁　"></a>数据库锁　</h3><pre><code>粒度小，方便用于集群环境</code></pre><h3 id="代码锁"><a href="#代码锁" class="headerlink" title="代码锁"></a>代码锁</h3><pre><code>粒度大，需要封装</code></pre><a id="more"></a>

<h2 id="微观"><a href="#微观" class="headerlink" title="微观"></a>微观</h2><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h4 id="行锁＆表锁"><a href="#行锁＆表锁" class="headerlink" title="行锁＆表锁"></a>行锁＆表锁</h4><p><strong><em>只有明确指定主键，才会执行行锁，否则执行表锁</em></strong></p>
<blockquote>
<p>无锁</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主键不存在</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">-1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>行锁</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主键明确</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">name</span>=<span class="string">'kkk'</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>表锁</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主键不明确</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'kkk'</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> &lt;&gt; <span class="number">3</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure>

<h2 id="锁算法"><a href="#锁算法" class="headerlink" title="锁算法"></a>锁算法</h2><h3 id="行锁算法"><a href="#行锁算法" class="headerlink" title="行锁算法"></a>行锁算法</h3><p> Record Lock:单个行记录上的锁</p>
<ul>
<li>键值在条件范围内</li>
<li>记录存在</li>
</ul>
<p>Gap Lock:间隙锁</p>
<ul>
<li>锁定一个范围,但不包含记录本身</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#id只有1-50</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">50</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure>


<p>Next-Key Lock:(行&amp;间隙)</p>
<ul>
<li>锁定一个范围,并且锁定记录本身<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#id只有1-50</span></span><br><span class="line">  <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">id</span>&gt;<span class="number">49</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure>
<h3 id="表锁算法"><a href="#表锁算法" class="headerlink" title="表锁算法"></a>表锁算法</h3>意向锁(升级机制)</li>
<li>当一个事务带着表锁去访问一个加了行锁的资源,那么,此时这个行锁就会升级成意向锁,将表锁住.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#事务A -升级表锁</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;  //此时是行锁</span><br><span class="line"><span class="comment">#事务B -锁表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'kkk'</span> <span class="keyword">for</span> <span class="keyword">update</span>;//升级表锁</span><br></pre></td></tr></table></figure>
<p>自增锁</p>
<ul>
<li>事务插入自增类型的列时,获取自增锁<blockquote>
<p>  如果一个事务正在往表中插入自增记录,其他事务都必须等待,对于有自增长值的列的并发插入性能较差,事务必须等待</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>数据库锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Java查漏补缺</title>
    <url>/2020/02/08/Java%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
    <content><![CDATA[<h2 id="String-StringBuffer-StringBuilder的区别"><a href="#String-StringBuffer-StringBuilder的区别" class="headerlink" title="String StringBuffer StringBuilder的区别"></a>String StringBuffer StringBuilder的区别</h2><ol>
<li>操作数量较少的字符串用String，不可修改的字符串；</li>
<li>在多线程且操作大量字符串用StringBuffer，线程安全，可修改。</li>
<li>在单线程且操作大量字符串用StringBuilder,速度快，但线程不安全，可修改； <a id="more"></a>

</li>
</ol>
<h2 id="变量存放在哪"><a href="#变量存放在哪" class="headerlink" title="变量存放在哪?"></a>变量存放在哪?</h2><p>基本数据类型是放在栈中还是放在堆中，这取决于基本类型在何处声明，下面对数据类型在内存中的存储问题来解释一下：</p>
<p>   一：在<strong>方法中声明的变量</strong>，即该变量是局部变量，每当<strong>程序调用方法时</strong>，系统都会为该方法建立一个<strong>方法栈</strong>，其所在方法中声明的变量就放在方法栈中，当方法结束系统会释放方法栈，其对应在该方法中声明的变量随着栈的销毁而结束，这就局部变量只能在方法中有效的原因</p>
<pre><code>在方法中声明的变量可以是基本类型的变量，也可以是引用类型的变量。

   （1）当声明是基本类型的变量的时，其变量名及值（变量名及值是两个概念）是放在方法栈中

   （2）当声明的是引用变量时，所声明的变量（该变量实际上是在方法中存储的是内存地址值）
       是放在方法的栈中，该变量所指向的对象是放在堆类存中的。</code></pre><p>   二：在类中声明的变量是成员变量，也叫全局变量，放在堆中的（因为全局变量不会随着某个方法执行结束而销毁）。</p>
<pre><code>同样在类中声明的变量即可是基本类型的变量 也可是引用类型的变量

（1）当声明的是基本类型的变量其变量名及其值放在堆内存中的

（2）引用类型时，其声明的变量仍然会存储一个内存地址值，该内存地址值指向所引用的对象。
      引用变量名和对应的对象仍然存储在相应的堆中</code></pre><h2 id="请你讲讲数组-Array-和列表-ArrayList-的区别？"><a href="#请你讲讲数组-Array-和列表-ArrayList-的区别？" class="headerlink" title="请你讲讲数组(Array)和列表(ArrayList)的区别？"></a>请你讲讲数组(Array)和列表(ArrayList)的区别？</h2><ol>
<li>Array可以包含基本类型和对象类型，ArrayList只能包含对象类型(对基本类型实现自动装箱)。</li>
<li>Array大小是固定的，ArrayList的大小是动态变化的。</li>
<li>ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。</li>
</ol>
<h2 id="请你解释什么是值传递和引用传递？"><a href="#请你解释什么是值传递和引用传递？" class="headerlink" title="请你解释什么是值传递和引用传递？"></a>请你解释什么是值传递和引用传递？</h2><ul>
<li>值传递是针对基本变量而言,传递的是该变量的一个副本,改变副本不影响原变量</li>
<li>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。 所以对引用对象进行操作会同时改变原对象</li>
<li>一般认为,java内的传递都是值传递.</li>
</ul>
<h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>匿名内部类也就是没有名字的内部类<br>正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写</p>
<p>但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"eat something"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到,我们直接将抽象类Person中的方法在大括号中实现了<br>这样便可以省略一个类的书写<br>匿名内部类还可以直接作用于接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;  <span class="comment">//多线程匿名内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="java8-新特性"><a href="#java8-新特性" class="headerlink" title="java8 新特性"></a>java8 新特性</h2><ol>
<li>lambda表达式 : 允许函数作为另一个方法的参数</li>
<li>方法引用: 可以直接引用已有Java类或实例的方法或构造器</li>
<li>默认方法: 在一个接口里有了一个默认的实现方法</li>
<li>新工具: 新的编译工具和类依赖分析工具</li>
<li>Stream API: 把真正的函数式编程引入java</li>
<li>Date Time API :加强对日期时间的处理</li>
<li>Optional 类 − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</li>
<li>avaScript 引擎 − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用</li>
</ol>
<h2 id="HashCode-Object的默认HashCode-是什么-为什么重写equals-还要重写hashCode"><a href="#HashCode-Object的默认HashCode-是什么-为什么重写equals-还要重写hashCode" class="headerlink" title="HashCode Object的默认HashCode()是什么?为什么重写equals() 还要重写hashCode()?"></a>HashCode Object的默认HashCode()是什么?为什么重写equals() 还要重写hashCode()?</h2><ul>
<li>Object 的HashCode()方法是<strong>本地方法</strong>,即使用C/C++实现的,该方法直接返回对象的<strong>内存地址</strong></li>
<li>首先我们要知道HashMap()比较key的时候的过程:</li>
</ul>
<ol>
<li>先求出key的HashCode值,判断是否相等</li>
<li>若相等再判断equals()是否相等,若相等则认为是相等的</li>
</ol>
<blockquote>
<p>现在有两个Student对象：</p>
</blockquote>
<pre><code>Student s1=new Student(&quot;小明&quot;,18);

Student s2=new Student(&quot;小明&quot;,18);</code></pre><p>此时,如果不重写equals方法,s1.equals(s2)为false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object 源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//可知equals的本质就是 == </span></span><br><span class="line"><span class="comment">//String 和包装类都重写了 equals方法</span></span><br></pre></td></tr></table></figure>



<p>假如只重写equals而不重写hashcode，那么Student类的hashcode方法就是Object默认的hashcode方法，由于默认的hashcode方法是<strong>本地方法</strong>是根据<strong>对象的内存地址</strong>经哈希算法得来的，显然此时<strong>s1!=s2</strong>,故两者的hashcode不一定相等。</p>
<blockquote>
<p>HashCode判断key相等,实际上是调用了HashSet()方法.</p>
</blockquote>
<p>重载hashCode()是为了对同一个key，能得到相同的Hash Code，这样HashMap就可以定位到我们指定的key上</p>
<h2 id="Java中的Math-round-1-5-等于多少"><a href="#Java中的Math-round-1-5-等于多少" class="headerlink" title="Java中的Math.round(-1.5)等于多少"></a>Java中的Math.round(-1.5)等于多少</h2><blockquote>
<p>Math.round(-1.5)的返回值是-1</p>
<p>四舍五入的原理是在参数上加0.5然后向下取整</p>
</blockquote>
<h2 id="String-str-“i”-与-String-str-new-String-“i”-一样吗"><a href="#String-str-“i”-与-String-str-new-String-“i”-一样吗" class="headerlink" title="String str = “i” 与 String str = new String(“i”)一样吗?"></a>String str = “i” 与 String str = new String(“i”)一样吗?</h2><p><a href="https://imgchr.com/i/14y5TS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/10/14y5TS.md.png" alt="14y5TS.md.png"></a></p>
<p><strong>堆</strong>：存放对象的实例以及对象的属性和方法</p>
<p><strong>栈</strong>：储存基本数据类型的值、执行的方法、方法中声明的变量、数组、对象的引用(reference类型)</p>
<p><strong>方法区</strong>：存储已被虚拟机加载的类元数据信息(元空间)</p>
<p><strong>运行时常量池</strong>：常量(final)、字符串</p>
<p>String str=”i”: Java虚拟机会将其分配到<strong><em>常量池</em></strong>中;</p>
<p>String str = new String(“i”) : 则会分到<strong><em>堆内存</em></strong>中,即使内容一样还是会创建新对象</p>
<p>在常量池中没有重复的元素,Java虚拟机会先在常量池中检索是否已经存在,如果有那么就直接赋值地址,如果没就创建一个,然后再赋给变量;</p>
<h2 id="抽象类与接口和普通类的区别"><a href="#抽象类与接口和普通类的区别" class="headerlink" title="抽象类与接口和普通类的区别"></a>抽象类与接口和普通类的区别</h2><ol>
<li>抽象类要被子类继承,接口要被类实现</li>
<li>接口只能做方法声明,抽象类中可以作方法声明,也可以做方法实现</li>
<li>接口里定义的变量只能是公共的静态的变量,抽象类中的变量是普通变量</li>
<li>抽象类可以有具体的方法和属性,接口只能有抽象方法和不可变常量.</li>
<li>构造函数: 抽象类可以有构造函数;接口不能有</li>
<li>抽象类不能直接实例化,普通类可以直接实例化</li>
</ol>
<h2 id="Java中的IO流分几种"><a href="#Java中的IO流分几种" class="headerlink" title="Java中的IO流分几种?"></a>Java中的IO流分几种?</h2><p>字节流和字符流.</p>
<p>字节流和字符流的区别是: 字节流按8位传输以字节为单位输入输出数据,字符流按16位字符为单位输入输出数据.</p>
<h2 id="BIO-NIO-AIO有什么区别"><a href="#BIO-NIO-AIO有什么区别" class="headerlink" title="BIO,NIO,AIO有什么区别?"></a>BIO,NIO,AIO有什么区别?</h2><ul>
<li>BIO: Block IO同步阻塞式IO,就是平常使用的IO,它的特点是模式简单使用方便,并发处理能力低.</li>
<li>NIO: Non IO同步非阻塞IO, 是传统的IO的升级,客户端和服务器端通过Channel(通道) 通讯,实现了多路复用.</li>
<li>AIO: Asynchronous IO 是NIO的升级,也叫NIO2,实现了异步非阻塞IO,异步IO的操作基于事件和回调机制.</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>se</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据库隔离级别</title>
    <url>/2020/02/08/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
    <content><![CDATA[<h1 id="1-事务"><a href="#1-事务" class="headerlink" title="1.事务"></a>1.事务</h1><p>事务只是一个改变,是<strong>一些操作的集合</strong>;<br>用专业的术语讲,它就是一个程序的执行单元;<br><strong>事务本身其实并不包括这4个特性</strong>,我们需要通过某些手段,尽可能的让这个执行单元满足这四个特性,那么我们就称他为一个事务,或者说是一个正确的事务</p>
<a id="more"></a>


<h1 id="2-四特性"><a href="#2-四特性" class="headerlink" title="2,四特性"></a>2,四特性</h1><ol>
<li>原子性:满足原子操作单元,对数据的操作,要么全部执行,要么全部失败</li>
<li>一致性:事务开始和完成,数据都必须保持一致</li>
<li>隔离性:事务之间是相互独立的,中间状态是不可见的</li>
<li>持久性:数据的修改是永久的</li>
</ol>
<h1 id="3-隔离级别"><a href="#3-隔离级别" class="headerlink" title="3,隔离级别"></a>3,隔离级别</h1><h2 id="3-1-并发情况下事务引发的问题"><a href="#3-1-并发情况下事务引发的问题" class="headerlink" title="3.1 并发情况下事务引发的问题"></a>3.1 并发情况下事务引发的问题</h2><pre><code>一般情况下,多个单元操作并发执行,会出现这么几个问题</code></pre><ol>
<li>脏读:A事务还未提交,B事务就读到了A事务的结果.(破坏了隔离性)</li>
<li>不可重复读:A事务在本次事务中,对自己未操作过的数据,进行了多次读取,结果出现了不一致或记录不存在的情况.(破坏了一致性,update和delete)</li>
<li>幻读:A事务在本次事务中,对自己未操作过的数据,进行了多次读取,第一次读取时,记录不存在,第二次读取时,记录出现了.(破坏了一致性,insert)</li>
</ol>
<h2 id="3-2解决-制定标准"><a href="#3-2解决-制定标准" class="headerlink" title="3.2解决(制定标准)"></a>3.2解决(制定标准)</h2><p>为了权衡<strong>隔离</strong>与<strong>并发</strong>的矛盾,ISO定义了四个事务的隔离机制,每个级别的隔离程度不同,允许出现的副作用也不同</p>
<ol>
<li>读未提交(read-uncommitted):最低级别,只能保证持久性</li>
<li>不可重复读(read-committed):语句级别的</li>
<li>可重复读(repeatable-read):事务级别</li>
<li>串行化(serializable):最高级别,事务与事务完成串行化执行,毫无并发可言,性能极低</li>
</ol>
<table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交</td>
<td>会</td>
<td>会</td>
<td>会</td>
</tr>
<tr>
<td>不可重复读</td>
<td>-</td>
<td>会</td>
<td>会</td>
</tr>
<tr>
<td>可重复读</td>
<td>-</td>
<td>-</td>
<td>会</td>
</tr>
<tr>
<td>串行化</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<p>注意:这四个级别只是一个标准,各个数据库厂商,并不是完全按照这个标准来做的</p>
<h2 id="3-3-实现-InnoDB"><a href="#3-3-实现-InnoDB" class="headerlink" title="3.3 实现(InnoDB)"></a>3.3 实现(InnoDB)</h2><h3 id="1-锁机制-阻止事务对数据的操作-各个隔离级别主要体现在读取数据时加的锁和释放时机"><a href="#1-锁机制-阻止事务对数据的操作-各个隔离级别主要体现在读取数据时加的锁和释放时机" class="headerlink" title="1. 锁机制:阻止事务对数据的操作,各个隔离级别主要体现在读取数据时加的锁和释放时机"></a>1. 锁机制:阻止事务对数据的操作,各个隔离级别主要体现在读取数据时加的锁和释放时机</h3><ul>
<li>RU:事务读取的时候不加锁</li>
<li>RC: 事务读取的时候加行级共享锁(读到才加锁),一旦读完,立刻释放(并不是事务结束).</li>
<li>RR: 事务读取时加行级共享锁,直到事务结束才会释放</li>
<li>SE: 事务读取是加表级共享锁,直到事务结束才会释放<h3 id="2-MVCC机制-生成一个数据快照-并用这个快照来提供一定级别的一致性的读取-也成为了多版本数据控制"><a href="#2-MVCC机制-生成一个数据快照-并用这个快照来提供一定级别的一致性的读取-也成为了多版本数据控制" class="headerlink" title="2. MVCC机制:生成一个数据快照,并用这个快照来提供一定级别的一致性的读取,也成为了多版本数据控制."></a>2. MVCC机制:生成一个数据快照,并用这个快照来提供一定级别的一致性的读取,也成为了多版本数据控制.</h3></li>
<li>实际就是<strong>CAS版本控制</strong>和<strong>读写分离</strong>的思想</li>
<li>主要作用于RC和RR级别</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
